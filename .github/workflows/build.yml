name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: 23
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
#      - name: Build and analyze
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Using the SonarCloud token from GitHub secrets
#        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=B8T-E-commerce_Orders-Service -Dsonar.login=${{ secrets.SONAR_TOKEN }}  # Explicitly pass the Sonar token
#        working-directory: ./Order-service  # Specify the working directory for Maven to run from

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B clean test
          echo "Test results:"
          ls -la target/surefire-reports/
          echo "JaCoCo report:"
          ls -la target/site/jacoco/
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar 
          -Dsonar.projectKey=b8t-e-commerce_orders-service
          -Dsonar.organization=b8t-e-commerce
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.java.coveragePlugin=jacoco
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
        working-directory: ./Order-service  # Specify the working directory for Maven to run from

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
         username: ${{ secrets.DOCKER_USERNAME }}
         password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build and tag Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/orders-service-order-service:latest .
        working-directory: ./Order-service
          
      # Step 8: Push Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/orders-service-order-service:latest
